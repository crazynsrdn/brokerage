#!/bin/bash

# 🧪 Brokerage API Test Script
# Run this script to test all API endpoints

set -e  # Exit on any error

API_BASE="http://localhost:8000"
CONTENT_TYPE="Content-Type: application/json"

echo "🚀 Testing Brokerage API..."
echo "================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test functions
test_endpoint() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    echo -e "\n${BLUE}Testing: ${description}${NC}"
    echo "→ ${method} ${endpoint}"
    
    if [ -n "$data" ]; then
        response=$(curl -s -X "${method}" "${API_BASE}${endpoint}" \
            -H "${CONTENT_TYPE}" \
            -d "${data}")
    else
        response=$(curl -s -X "${method}" "${API_BASE}${endpoint}")
    fi
    
    if echo "$response" | jq . >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Success${NC}"
        echo "$response" | jq .
    else
        echo -e "${RED}✗ Failed${NC}"
        echo "$response"
    fi
}

# Check if API is running
echo -e "${YELLOW}Checking if API is running...${NC}"
if ! curl -s "${API_BASE}/health" >/dev/null; then
    echo -e "${RED}❌ API is not running at ${API_BASE}${NC}"
    echo "Please start the API with: docker-compose up -d"
    exit 1
fi

echo -e "${GREEN}✅ API is running${NC}"

# Test 1: Health Check
test_endpoint "GET" "/health" "" "Health Check"

# Test 2: List existing users
test_endpoint "GET" "/user/" "" "List All Users"

# Test 3: Get specific user
test_endpoint "GET" "/user/user_1" "" "Get User by ID"

# Test 4: Create new user
USER_DATA='{
  "username": "test_trader_'$(date +%s)'",
  "email": "test'$(date +%s)'@example.com",
  "full_name": "Test Trader",
  "initial_balance": 25000.0
}'

echo -e "\n${BLUE}Creating test user...${NC}"
CREATE_USER_RESPONSE=$(curl -s -X POST "${API_BASE}/user/" \
    -H "${CONTENT_TYPE}" \
    -d "${USER_DATA}")

if echo "$CREATE_USER_RESPONSE" | jq . >/dev/null 2>&1; then
    TEST_USER_ID=$(echo "$CREATE_USER_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}✓ User created with ID: ${TEST_USER_ID}${NC}"
    echo "$CREATE_USER_RESPONSE" | jq .
else
    echo -e "${RED}✗ Failed to create user${NC}"
    echo "$CREATE_USER_RESPONSE"
    TEST_USER_ID="user_1"  # Fallback to existing user
fi

# Test 5: Update user balance
test_endpoint "PUT" "/user/${TEST_USER_ID}/balance?new_balance=30000" "" "Update User Balance"

# Test 6: Submit market order
MARKET_ORDER='{
  "user_id": "'${TEST_USER_ID}'",
  "symbol": "AAPL",
  "side": "BUY",
  "order_type": "MARKET",
  "quantity": 100
}'

echo -e "\n${BLUE}Submitting market order...${NC}"
MARKET_ORDER_RESPONSE=$(curl -s -X POST "${API_BASE}/order" \
    -H "${CONTENT_TYPE}" \
    -d "${MARKET_ORDER}")

if echo "$MARKET_ORDER_RESPONSE" | jq . >/dev/null 2>&1; then
    MARKET_ORDER_ID=$(echo "$MARKET_ORDER_RESPONSE" | jq -r '.order_id')
    echo -e "${GREEN}✓ Market order created with ID: ${MARKET_ORDER_ID}${NC}"
    echo "$MARKET_ORDER_RESPONSE" | jq .
else
    echo -e "${RED}✗ Failed to create market order${NC}"
    echo "$MARKET_ORDER_RESPONSE"
fi

# Test 7: Submit limit order
LIMIT_ORDER='{
  "user_id": "'${TEST_USER_ID}'",
  "symbol": "TSLA",
  "side": "BUY",
  "order_type": "LIMIT",
  "quantity": 50,
  "price": 250.00
}'

echo -e "\n${BLUE}Submitting limit order...${NC}"
LIMIT_ORDER_RESPONSE=$(curl -s -X POST "${API_BASE}/order" \
    -H "${CONTENT_TYPE}" \
    -d "${LIMIT_ORDER}")

if echo "$LIMIT_ORDER_RESPONSE" | jq . >/dev/null 2>&1; then
    LIMIT_ORDER_ID=$(echo "$LIMIT_ORDER_RESPONSE" | jq -r '.order_id')
    echo -e "${GREEN}✓ Limit order created with ID: ${LIMIT_ORDER_ID}${NC}"
    echo "$LIMIT_ORDER_RESPONSE" | jq .
else
    echo -e "${RED}✗ Failed to create limit order${NC}"
    echo "$LIMIT_ORDER_RESPONSE"
fi

# Test 8: Get order details
if [ -n "$MARKET_ORDER_ID" ]; then
    test_endpoint "GET" "/order/${MARKET_ORDER_ID}" "" "Get Market Order Details"
fi

# Test 9: Get user orders
test_endpoint "GET" "/orders/user/${TEST_USER_ID}" "" "Get User Orders"

# Test 10: Queue status
test_endpoint "GET" "/queue/status" "" "Queue Status"

# Test 11: Cancel order (if limit order exists)
if [ -n "$LIMIT_ORDER_ID" ]; then
    echo -e "\n${YELLOW}Waiting 2 seconds before canceling order...${NC}"
    sleep 2
    test_endpoint "DELETE" "/order/${LIMIT_ORDER_ID}" "" "Cancel Limit Order"
fi

# Test 12: Error handling - Invalid user
test_endpoint "GET" "/user/invalid_user_id" "" "Error Handling - Invalid User"

# Test 13: Error handling - Invalid order data
INVALID_ORDER='{"user_id": "invalid", "symbol": "", "side": "INVALID"}'
test_endpoint "POST" "/order" "${INVALID_ORDER}" "Error Handling - Invalid Order"

echo -e "\n${GREEN}🎉 API Testing Complete!${NC}"
echo "================================"

# Performance test
echo -e "\n${YELLOW}Running quick performance test...${NC}"
echo "Submitting 10 orders rapidly..."

for i in {1..10}; do
    PERF_ORDER='{
      "user_id": "'${TEST_USER_ID}'",
      "symbol": "SPY",
      "side": "BUY", 
      "order_type": "MARKET",
      "quantity": '${i}'
    }'
    
    curl -s -X POST "${API_BASE}/order" \
        -H "${CONTENT_TYPE}" \
        -d "${PERF_ORDER}" > /dev/null &
done

wait  # Wait for all background jobs to complete

echo -e "${GREEN}✓ Performance test completed${NC}"

# Final queue status
echo -e "\n${BLUE}Final queue status:${NC}"
curl -s "${API_BASE}/queue/status" | jq .

echo -e "\n${GREEN}✅ All tests completed successfully!${NC}"
echo -e "${BLUE}💡 Next steps:${NC}"
echo "1. Check Swagger docs: http://localhost:8000/docs"
echo "2. Monitor Celery: http://localhost:5555 (if monitoring enabled)"
echo "3. View logs: docker-compose logs -f"
